searchState.loadedDescShard("gdapi", 0, "gdapi\nAn asynchronous client implementation.\nThe error type and all related types.\nA collection of models returned by the API.\nThe client used to make requests.\nDeletes an account comment. Requires authentication via …\nReturns the argument unchanged.\nGets the levels of a gauntlet by its id.\nGets all available gauntlets.\nCalls <code>U::from(self)</code>.\nGets a level by its id.\nGets a list of levels.\nAuthenticates the client to get access to auth-only …\nGets all map packs of the provided page.\nCreates a new client.\nSearches for a user.\nUploads an account comment. Requires authentication via …\nGets a user by its account id.\nThe client is already logged in\nA wrapper around a <code>CryptoError</code>\nThe error type for all cryptographic actions.\nA wrapper around a <code>DecodeError</code>\nContains the error value\nThe error type used across the library.\nA wrapper around a <code>FromUtf8Error</code>\nAn enum value is out of range\nA required key is not present\nAn array string has an invalid length\nThe server rejected the request\nThe client needs to be logged in\nA key-value string has an odd length\nContains the success value\nA wrapper around a <code>ParseIntError</code>\nA wrapper around a <code>ParseIntError</code>\nA wrapper around a <code>ParserError</code>\nThe error type for all parsing actions.\nA wrapper around a <code>ReqwestError</code>\nThe standard result type, but with the error defaulting to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nItems related to gauntlets.\nIdentifiers of models.\nItems related to levels.\nItems related to map packs.\nItems related to users.\nRepresents a gauntlet.\nReturns the argument unchanged.\nThe id of the gauntlet\nCalls <code>U::from(self)</code>.\nThe ids of the gauntlet levels\nThe id of an account.\nThe id of a comment.\nThe id of a gauntlet.\nThe id of a level.\nThe id of a map pack.\nThe id of a user.\nRepresents the copyability of a level.\nRepresents the creator of a level.\nRepresents the specific demon difficulty of a level.\nRepresents the difficulty of a level.\nRepresents a level.\nRepresents the rating of a level.\nThe account id of the creator\nThe copyability of the level\nThe creator of the level\nThe user id of the level creator\nThe description of the level\nThe difficulty of the level\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe id of the level\nThe name of the level\nThe rating of the level\nThe stars of the level\nThe user id of the creator\nThe username of the creator\nRepresents a map pack.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ids of the map pack levels\nThe id of the map pack\nThe name of the map pack\nRepresents a partial user that you get when logging in.\nRepresents a user.\nThe account id of the user\nThe account id of the user\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user id of the user\nThe user id of the user\nThe username of the user")